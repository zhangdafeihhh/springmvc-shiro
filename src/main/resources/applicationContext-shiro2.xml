<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:util="http://www.springframework.org/schema/util" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:p="http://www.springframework.org/schema/p"
	xsi:schemaLocation="
       http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd">

	<!-- ********************************配置基于EhCache的cacheManager（用于shiro安全管理器，用来缓存用户会话、认证信息、授权信息）-->
	<!-- <bean id="ehCacheManager"	class="org.springframework.cache.ehcache.EhCacheManagerFactoryBean">
		<property name="configLocation" value="classpath:ehcache.xml" />
	</bean>
	<bean id="shiroCacheManager" class="org.apache.shiro.cache.ehcache.EhCacheManager">
		<property name="cacheManager" ref="ehCacheManager" />
	</bean> -->

	<!-- ********************************配置基于Redis的cacheManager（用于shiro安全管理器，用来缓存用户会话、认证信息、授权信息）-->
	<bean id="shiroCacheManager" class="com.zhuanche.shiro.cache.RedisCacheManager">
		<property name="redisTemplate" ref="redisTemplate" />
		<property name="expireSeconds" value="3600" />
	</bean>
	
	<!-- ********************************配置会话Session Cookie -->
	<bean id="sessionIdGenerator" class="com.zhuanche.shiro.session.UuIdSessionIdGenerator" />
	<!-- 会话Cookie模板 -->
	<bean id="sessionIdCookie" class="org.apache.shiro.web.servlet.SimpleCookie">
		<constructor-arg value="sid" />
		<property name="httpOnly" value="true" />
		<property name="maxAge" value="-1" />
	</bean>
	<!-- 会话DAO （在这里实现自定义的session信息执久化操作）-->
	<bean id="sessionDAO" class="com.zhuanche.shiro.session.RedisSessionDAO">
		<property name="activeSessionsCacheName" value="mp-manage-shiro-activeSessionCache" />
		<property name="sessionIdGenerator" ref="sessionIdGenerator" />
		<property name="redisTemplate" ref="redisTemplate" />
		<property name="authorizingRealm" ref="shiroRealm" />
	</bean>
	<!-- 会话管理器 -->
	<bean id="sessionManager" class="org.apache.shiro.web.session.mgt.DefaultWebSessionManager">
		<property name="globalSessionTimeout" value="3600000" /> <!-- 这里设置为60分钟会话过期时效 -->
		<property name="deleteInvalidSessions" value="true" />
		<property name="sessionValidationSchedulerEnabled" value="true" />
		<property name="sessionValidationScheduler" ref="sessionValidationScheduler" />
		<property name="sessionDAO" ref="sessionDAO" />
		<property name="sessionIdCookieEnabled" value="true" />
		<property name="sessionIdCookie" ref="sessionIdCookie" />
	</bean>
	<!-- 会话过期校验调度器 -->
	<bean id="sessionValidationScheduler" class="org.apache.shiro.session.mgt.quartz.QuartzSessionValidationScheduler">
		<property name="sessionValidationInterval" value="1800000" />
		<property name="sessionManager" ref="sessionManager" />
	</bean>

	<!-- ********************************配置会话rememberMe Cookie -->
	<bean id="rememberMeCookie" class="org.apache.shiro.web.servlet.SimpleCookie">
		<constructor-arg value="mpRememberMe" />
		<property name="httpOnly" value="true" />
		<property name="maxAge" value="432000" /><!-- 5天 -->
	</bean>
	<bean id="rememberMeManager" class="org.apache.shiro.web.mgt.CookieRememberMeManager">
		<!-- rememberMe cookie加密的密钥 建议每个项目都不一样 默认AES算法 密钥长度（128 256 512 位） -->
		<property name="cipherKey"	value="#{T(org.apache.shiro.codec.Base64).decode('4AvVhmFLUs0KTA3Kprsdag==')}" />
		<property name="cookie" ref="rememberMeCookie" />
	</bean>
	
	<!-- ********************************配置Realm实现 -->
	<bean id="shiroRealm" class="com.zhuanche.shiro.realm.UsernamePasswordRealm">
		<property name="name" value="SAASUsernamePasswordRealm" />
		<property name="authorizationCachingEnabled" value="true" /><!-- 是否启用授权缓存（生产环境可调节此参数进行调优） -->
	</bean>
	
	<!-- ********************************配置SecurityManager安全管理器 -->
	<bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
		<property name="cacheManager" ref="shiroCacheManager" />
		<property name="sessionManager" ref="sessionManager" />
		<property name="rememberMeManager" ref="rememberMeManager" />
		<property name="realms">
			<list>
				<ref bean="shiroRealm" />
			</list>
		</property>
	</bean>
	<bean class="org.springframework.beans.factory.config.MethodInvokingFactoryBean">
		<property name="staticMethod" value="org.apache.shiro.SecurityUtils.setSecurityManager" />
		<property name="arguments" ref="securityManager" />
	</bean>

	<!-- ********************************配置Shiro的Web过滤器 -->
	<bean id="shiroFilter" class="com.zhuanche.shiro.PlatformShiroFilterFactoryBean">
		<property name="securityManager" ref="securityManager" />
		<property name="loginUrl" value="/login.json" />
		<property name="successUrl" value="${homepage.url}" />
		<property name="unauthorizedUrl" value="/unauthorized.json" /><!-- 因为和CAS集成了，因框架存在BUG不起作用无法注入，只能是默认的unauthorized.jsp -->
		<property name="filters">
			<util:map>
				<!-- 添加casFilter到shiroFilter -->
				<!-- <entry key="casFilter" value-ref="casFilter" /> -->
			</util:map>
		</property>
		<property name="filterChainDefinitions">
			<value>
				/interCItyPhoneController/*.json=anon
				/resetPassword/*.json = anon
				/nginx.html = anon
				/login.json = anon
				/updateLevel.json = anon
				/permission/levelList.json = anon
				/unauthorized.json=anon
				/phone/*.json = anon
				/getMsgCode.json = anon
				/dologin.json = anon
				/logout.html = logout
				/** = user
			</value>
		</property>
	</bean>
	<!-- Shiro生命周期处理器 -->
	<bean id="lifecycleBeanPostProcessor" class="org.apache.shiro.spring.LifecycleBeanPostProcessor"/>
	<!-- Shiro权限控制注解 -->
	<bean class="org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor">
    	  <property name="securityManager" ref="securityManager" />
    </bean>



	<!-- 配置用于持久化SESSION的REDIS -->
	<bean id="jedisPoolConfig" class="redis.clients.jedis.JedisPoolConfig">
		<property name="maxTotal" value="${redis.maxActive}" />
		<property name="maxIdle" value="${redis.maxIdle}" />
		<property name="testOnBorrow" value="${redis.testOnBorrow}" />
	</bean>
	<bean id="redisSentinelConfiguration" class="org.springframework.data.redis.connection.RedisSentinelConfiguration">
		<property name="master">
			<bean class="org.springframework.data.redis.connection.RedisNode">
				<property name="name" value="${redis.sentinel.name}" />
			</bean>
		</property>
		<property name="sentinels">
			<set>
				<bean class="org.springframework.data.redis.connection.RedisNode">
					<constructor-arg name="host" value="${redis.server1.host}" />
					<constructor-arg name="port" value="${redis.server1.port}" />
				</bean>
				<bean class="org.springframework.data.redis.connection.RedisNode">
					<constructor-arg name="host" value="${redis.server2.host}" />
					<constructor-arg name="port" value="${redis.server2.port}" />
				</bean>
				<bean class="org.springframework.data.redis.connection.RedisNode">
					<constructor-arg name="host" value="${redis.server3.host}" />
					<constructor-arg name="port" value="${redis.server3.port}" />
				</bean>
			</set>
		</property>
	</bean>
	<bean id="jedisConnectionFactory" class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory" p:poolConfig-ref="jedisPoolConfig" p:usePool="true">
		<constructor-arg name="sentinelConfig" ref="redisSentinelConfiguration" />
	</bean>
	<bean id="redisTemplate" class="org.springframework.data.redis.core.RedisTemplate">
		<property name="connectionFactory" ref="jedisConnectionFactory" />
		<property name="keySerializer">
			<bean class="org.springframework.data.redis.serializer.StringRedisSerializer" />
		</property>
		<property name="valueSerializer">
			<bean class="org.springframework.data.redis.serializer.JdkSerializationRedisSerializer" />
		</property>
	</bean>
	
</beans>